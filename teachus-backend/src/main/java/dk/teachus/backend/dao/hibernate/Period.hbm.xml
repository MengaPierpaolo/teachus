<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC
        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
        "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">

<hibernate-mapping package="dk.teachus.backend.domain.impl" default-lazy="false">

    <class name="PeriodImpl" table="period">
		<id name="id" column="id" access="field">
            <generator class="native"/>
        </id>
        
		<version name="version" access="field" />
		
		<property name="name" length="100" />
        
        <component name="beginDate">
        	<property name="date" column="begin_date" type="timestamp" />
			<property name="timeZone" column="begin_date_tz" type="timezone" />
        </component>
        <component name="endDate">
        	<property name="date" column="end_date" type="timestamp" />
			<property name="timeZone" column="end_date_tz" type="timezone" />
        </component>
				
		<component name="startTime">
        	<property name="date" column="start_time" type="time" />
			<property name="timeZone" column="start_time_tz" type="timezone" />
        </component>
        <component name="endTime">
        	<property name="date" column="end_time" type="time" />
			<property name="timeZone" column="end_time_tz" type="timezone" />
        </component>
		
		<property name="weekDays" column="week_days" type="dk.teachus.backend.dao.hibernate.WeekDaysUserType" />
        
        <many-to-one name="teacher" column="teacher_id" class="TeacherImpl" cascade="none" />
        
		<property name="location" length="100" />
        
        <property name="price" />
        
        <property name="lessonDuration" column="lesson_duration" not-null="true" />
        
        <property name="intervalBetweenLessonStart" column="interval_between_lesson_start" not-null="true" />
        
        <property name="repeatEveryWeek" column="repeat_every_week" not-null="true" />
        
        <property name="status" length="10" type="dk.teachus.backend.dao.hibernate.PeriodStatusUserType" />
    </class>
    
    <sql-query name="periodDeleteability">
    	<return-scalar column="pid" type="long"/>
    	<return-scalar column="booking_count" type="long"/>
    	SELECT 
    		p.id AS pid, 
    		COUNT( b.id ) AS booking_count
		FROM
			period AS p
			LEFT JOIN 
			booking AS b ON ( p.id = b.period_id AND b.active = 1 )
		GROUP BY 
			p.id
    </sql-query>

</hibernate-mapping>